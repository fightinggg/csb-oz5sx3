{"version":3,"sources":["App.js","index.js"],"names":["TextArea","Input","zeroFill","i","getSqlValue","colName","type","comment","rangeMatch","match","a","b","undefined","na","parseFloat","nb","t","indexOf","Math","random","floor","rangeof","arr","oneofMatch","replaceAll","split","map","o","trim","length","date","Date","month","getMonth","day","getDate","getFullYear","getCurrentTime","toString","slice","getInsertSql","sql","tableNameMatch","data","tableName","cols","push","res","sufValue","row","col","val","join","midValue","getTableHead","table","row0","Object","keys","title","dataIndex","key","App","useState","text","setText","autoSize","minRows","onChange","e","target","value","dataSource","columns","size","scroll","x","disabled","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.ccb812bb.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { Input } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useState } from \"react\";\nimport { Table } from \"antd\";\nconst { TextArea } = Input;\n\n/**\n * 获取当前时间 格式：yyyy-MM-dd HH:MM:SS\n */\nfunction getCurrentTime() {\n  var date = new Date(); //当前时间\n  var month = zeroFill(date.getMonth() + 1); //月\n  var day = zeroFill(date.getDate()); //日\n\n  //当前时间\n  var curTime = date.getFullYear() + month + day;\n\n  return curTime;\n}\n\n/**\n * 补零\n */\nfunction zeroFill(i) {\n  if (i >= 0 && i <= 9) {\n    return \"0\" + i;\n  } else {\n    return i;\n  }\n}\n\nfunction oneof(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction rangeof(a, b) {\n  if (a === undefined || b === undefined) {\n    return 0;\n  }\n\n  let na = parseFloat(a);\n  let nb = parseFloat(b);\n  if (na > nb) {\n    const t = na;\n    na = nb;\n    nb = t;\n  }\n\n  if (a.indexOf(\".\") !== -1 || b.indexOf(\".\") !== -1) {\n    return Math.random() * (nb - na) + na;\n  } else {\n    return (Math.floor(Math.random() * 1e15) % (nb - na + 1)) + na;\n  }\n}\n\nfunction getSqlValue(colName, type, comment) {\n  const rangeMatch = comment.match(/.*(:|：)\\s*\\[([^,]+),([^,]+)\\]\\s*/);\n  if (rangeMatch) {\n    return rangeof(rangeMatch[2], rangeMatch[3]);\n  }\n\n  const oneofMatch = comment.match(\".*(:|：)(.*)\");\n  if (oneofMatch) {\n    return oneof(\n      oneofMatch[2]\n        .replaceAll(\"、\", \",\")\n        .split(\",\")\n        .map((o) => o.trim())\n    );\n  }\n\n  if (type === \"image\") {\n    return \"https://img.xjh.me/random_img.php\";\n  }\n\n  if (colName === \"imp_date\") {\n    return getCurrentTime();\n  }\n\n  if (type === \"String\") {\n    return Math.random().toString(36).slice(-6);\n  }\n  if (type === \"Int64\") {\n    return Math.floor(Math.random() * 10000);\n  }\n  if (type === \"Float64\") {\n    return Math.random() * 10000;\n  }\n  return 1;\n}\n\nfunction getInsertSql(sql) {\n  // return JSON.stringify(sql);\n  const tableNameMatch = sql.match(\n    /\\s*(create|CREATE)\\s+(table|TABLE)\\s+([\\w.]+)\\s+.*/\n  );\n  if (!tableNameMatch) {\n    return {\n      data: [],\n      sql: \"无法分析出表的名字\"\n    };\n  }\n  const tableName = tableNameMatch[3];\n\n  sql = sql.split(\"\\n\");\n\n  const cols = [];\n  for (let i = 0; i < sql.length; i++) {\n    const match = sql[i].match(\n      /\\s*`?(\\w+)`?\\s+(Int64|String|Float64)\\s+COMMENT\\s+'(.*)'/\n    );\n    if (match) {\n      cols.push({\n        colName: match[1],\n        type: match[2],\n        comment: match[3]\n      });\n    }\n  }\n\n  let res = [];\n  let data = [];\n  for (let i = 0; i < 3000; i++) {\n    let sufValue = [];\n    let row = {};\n\n    for (const col of cols) {\n      const val = getSqlValue(col.colName, col.type, col.comment);\n      if (col.type === \"String\") {\n        sufValue.push(`'${val}'`);\n      } else {\n        sufValue.push(val);\n      }\n      row[col.colName] = val;\n    }\n\n    data.push(row);\n    res.push(\"(\" + sufValue.join(\",\") + \")\");\n  }\n\n  const midValue = cols.map((o) => o.colName).join(\"`,`\");\n  const prefix = `insert into \\`${tableName}\\` (\\`${midValue}\\`) values`;\n  return {\n    data,\n    sql: prefix + \"\\\\\\n\" + res.join(\",\\\\\\n\")\n  };\n}\n\nfunction getTableHead(table) {\n  const row0 = table[0];\n  if (row0 === undefined) {\n    return [];\n  }\n  //console.log(row0);\n\n  var head = Object.keys(row0).map((o) => {\n    return {\n      title: o,\n      dataIndex: o,\n      key: o\n    };\n  });\n  //console.log(head);\n  return head;\n}\n\nexport default function App() {\n  const defaultText = `\n  CREATE TABLE mytable\n(\n    \\`col1\\` String COMMENT '第1列枚举值:a,b,c',\n    \\`col2\\` String COMMENT '第2列整数范围:[1,2]',\n    \\`col3\\` String COMMENT '第3列',\n    \\`col4\\` Float64 COMMENT '第4列',\n    \\`col5\\` String COMMENT '第5列:[0,1.0]'\n)\n  `;\n  const [text, setText] = useState(defaultText);\n\n  return (\n    <>\n      生成的数据取决于Comment的内容\n      <br />\n      对于形如 'xxx:a,b,c' 形式的，取值枚举，限定为a,b,c\n      <br />\n      对于形如':[a,b]'形式的， 取值范围，限定为a到b\n      <TextArea\n        autoSize={{ minRows: 3 }}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n        value={text}\n      />\n      <Table\n        dataSource={getInsertSql(text).data}\n        columns={getTableHead(getInsertSql(text).data)}\n        size=\"small\"\n        scroll={{ x: true }}\n      />\n      <TextArea\n        disabled\n        autoSize={{ minRows: 3 }}\n        value={getInsertSql(text).sql}\n      />\n    </>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}