{"version":3,"sources":["App.js","index.js"],"names":["TextArea","Input","zeroFill","i","_cache","cacheAbleMatch","str","reg","key","match","getSqlValue","colName","type","comment","arr","oneofMatch","replaceAll","split","map","o","trim","Math","floor","random","length","date","Date","month","getMonth","day","getDate","getFullYear","getCurrentTime","toLowerCase","toString","slice","includes","getInsertSql","sql","size","tableNameMatch","data","tableName","cols","push","res","_step","sufValue","row","_iterator","_createForOfIteratorHelper","s","n","done","col","value","val","concat","err","e","f","join","midValue","getTableHead","table","row0","undefined","Object","keys","title","dataIndex","App","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","setSize","_jsxs","_Fragment","children","_jsx","autoSize","minRows","onChange","target","Select","defaultValue","style","width","options","label","Table","dataSource","columns","scroll","x","disabled","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.432af025.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { Input } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useState } from \"react\";\nimport { Table } from \"antd\";\nimport { Select, Space } from \"antd\";\nconst { TextArea } = Input;\n\n/**\n * 获取当前时间 格式：yyyy-MM-dd HH:MM:SS\n */\nfunction getCurrentTime() {\n  var date = new Date(); //当前时间\n  var month = zeroFill(date.getMonth() + 1); //月\n  var day = zeroFill(date.getDate()); //日\n\n  //当前时间\n  var curTime = date.getFullYear() + month + day;\n\n  return curTime;\n}\n\n/**\n * 补零\n */\nfunction zeroFill(i) {\n  if (i >= 0 && i <= 9) {\n    return \"0\" + i;\n  } else {\n    return i;\n  }\n}\n\nfunction oneof(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction rangeof(a, b) {\n  if (a === undefined || b === undefined) {\n    return 0;\n  }\n\n  let na = parseFloat(a);\n  let nb = parseFloat(b);\n  if (na > nb) {\n    const t = na;\n    na = nb;\n    nb = t;\n  }\n\n  if (a.indexOf(\".\") !== -1 || b.indexOf(\".\") !== -1) {\n    return Math.random() * (nb - na) + na;\n  } else {\n    return (Math.floor(Math.random() * 1e15) % (nb - na + 1)) + na;\n  }\n}\n\nconst _cache = {};\nfunction cacheAbleMatch(str, reg) {\n  const key = reg + \"$$$$$$\" + str;\n  if (key in _cache) {\n    return _cache[key];\n  } else {\n    return (_cache[key] = str.match(reg));\n  }\n}\n\nfunction getSqlValue(colName, type, comment) {\n  const rangeMatch = cacheAbleMatch(\n    comment,\n    /.*(:|：)\\s*\\[([^,]+),([^,]+)\\]\\s*/\n  );\n  if (rangeMatch) {\n    return 1;\n  }\n\n  const oneofMatch = cacheAbleMatch(comment, \".*(:|：)(.*)\");\n  if (oneofMatch) {\n    return oneof(\n      oneofMatch[2]\n        .replaceAll(\"、\", \",\")\n        .split(\",\")\n        .map((o) => o.trim())\n    );\n  }\n\n  if (type === \"image\") {\n    return \"https://img.xjh.me/random_img.php\";\n  }\n\n  if (colName === \"imp_date\") {\n    return getCurrentTime();\n  }\n\n  if (type.toLowerCase() === \"string\") {\n    return Math.random().toString(36).slice(-6);\n  }\n  if (type.toLowerCase().includes(\"int\")) {\n    return Math.floor(Math.random() * 10000);\n  }\n  if (\n    type.toLowerCase().includes(\"double\") ||\n    type.toLowerCase().includes(\"float\")\n  ) {\n    return Math.random() * 10000;\n  }\n  return 1;\n}\n\nfunction getInsertSql(sql, size) {\n  // return JSON.stringify(sql);\n  const tableNameMatch = sql.match(\n    /\\s*(create|CREATE)\\s+(table|TABLE)\\s+([\\w.]+)\\s+.*/\n  );\n  if (!tableNameMatch) {\n    return {\n      data: [],\n      sql: \"无法分析出表的名字\"\n    };\n  }\n  const tableName = tableNameMatch[3];\n\n  sql = sql.split(\"\\n\");\n\n  const cols = [];\n  for (let i = 0; i < sql.length; i++) {\n    const match = sql[i].match(/\\s*`?(\\w+)`?\\s+(\\w+)\\s+\\w+\\s+'(.*)'/);\n    if (match) {\n      cols.push({\n        colName: match[1],\n        type: match[2],\n        comment: match[3]\n      });\n    }\n  }\n  let res = [];\n  let data = [];\n  for (let i = 0; i < size; i++) {\n    let sufValue = [];\n    let row = {};\n\n    for (const col of cols) {\n      const val = getSqlValue(col.colName, col.type, col.comment);\n      if (col.type === \"String\") {\n        sufValue.push(`'${val}'`);\n      } else {\n        sufValue.push(val);\n      }\n      row[col.colName] = val;\n    }\n\n    data.push(row);\n    res.push(\"(\" + sufValue.join(\",\") + \")\");\n  }\n\n  const midValue = cols.map((o) => o.colName).join(\"`,`\");\n  const prefix = `insert into \\`${tableName}\\` (\\`${midValue}\\`) values`;\n  var split = \"\\\\\\n\";\n  var split = \"\";\n  return {\n    data,\n    sql: prefix + split + res.join(\",\" + split)\n  };\n}\n\nfunction getTableHead(table) {\n  const row0 = table[0];\n  if (row0 === undefined) {\n    return [];\n  }\n  //console.log(row0);\n\n  var head = Object.keys(row0).map((o) => {\n    return {\n      title: o,\n      dataIndex: o,\n      key: o\n    };\n  });\n  //console.log(head);\n  return head;\n}\n\nexport default function App() {\n  const defaultText = `\n  CREATE TABLE mytable\n(\n    \\`col1\\` String COMMENT '第1列枚举值:a,b,c',\n    \\`col2\\` String COMMENT '第2列整数范围:[1,2]',\n    \\`col3\\` String COMMENT '第3列',\n    \\`col4\\` Float64 COMMENT '第4列',\n    \\`col5\\` String COMMENT '第5列:[0,1.0]'\n)\n  `;\n  const [text, setText] = useState(defaultText);\n  const [size, setSize] = useState(10);\n\n  return (\n    <>\n      生成的数据取决于Comment的内容\n      <br />\n      对于形如 'xxx:a,b,c' 形式的，取值枚举，限定为a,b,c\n      <br />\n      对于形如':[a,b]'形式的， 取值范围，限定为a到b\n      <TextArea\n        autoSize={{ minRows: 3 }}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n        value={text}\n      />\n      <Select\n        defaultValue=\"10\"\n        style={{ width: 120 }}\n        onChange={setSize}\n        options={[\n          { value: \"10\", label: \"10\" },\n          { value: \"100\", label: \"100\" },\n          { value: \"1000\", label: \"1000\" },\n          { value: \"10000\", label: \"10000\" }\n        ]}\n      />\n      <Table\n        dataSource={getInsertSql(text, size).data}\n        columns={getTableHead(getInsertSql(text, 1).data)}\n        size=\"small\"\n        scroll={{ x: true }}\n      />\n      <TextArea\n        disabled\n        autoSize={{ minRows: 3 }}\n        value={getInsertSql(text, size).sql}\n      />\n    </>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}